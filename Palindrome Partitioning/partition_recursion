# 方法：递归的思想，如partition(“aab”) = 第一次拆分一个，得到partition("a")与partition("ab") + 
# 第二次拆分两个，得到partition("aa")与partition("b") + 最后判断"aab"是否为回文
#
# 经验：拷贝数组一定要注意深度拷贝和一般拷贝；对于二维数组更要注意这个问题，不然容易出现错误的更改一些记录
# 如32、33、41行

class Solution(object):
    def partition(self, s):
        """
        :type s: str
        :rtype: List[List[str]]
        """
        sign = {}
        return self.recursion(s, sign, 0)

        
    def recursion(self, s, sign, n):
        # print("-----------------")
        # print(n)
        # print(n, s)
        if not s:
            return []
        if len(s) == 1:
            return [[s]]
        res = []
        for i in range(1, len(s)):
            # print("==============")
            # print(n, i, s[:i], s[i:])
            tmp = []
            if self.isPalidrome(s[:i]):
                isNew = False
                if s[i:] in sign:
                    for l in sign[s[i:]]:
                        tmp.append(l[:])
                else:
                    tmp = self.recursion(s[i:], sign, n+1)
                    isNew = True
                if isNew:
                    sign[s[i:]] = []       
                for l in tmp:
                    if isNew:
                        sign[s[i:]].append(l[:])
                    l.insert(0, s[:i])
            res += tmp
        if self.isPalidrome(s):
            res.append([s])
        return res

        
    def isPalidrome(self, s):
        if not s:
            return False
        l, r = 0, len(s)-1
        while l < r:
            if s[l] != s[r]:
                return False
            l += 1
            r -= 1
        return True
