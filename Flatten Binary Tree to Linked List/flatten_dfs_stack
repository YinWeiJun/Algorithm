# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

# 从问题很容易发现，返回结果的顺序正是tree前序深度优先遍历的顺序
# 所以进行前序遍历就可以了，由于递归的方法空间复杂度高，所以选择通过堆栈stack进行前序深度优先遍历

class Solution:
    def flatten(self, root):
        """
        :type root: TreeNode
        :rtype: void Do not return anything, modify root in-place instead.
        """
        if not root:
            return None
        stack = []
        if root.right:
            stack.append(root.right)
        if root.left:
            stack.append(root.left)
        tmp = root
        while stack:
            node = stack.pop()
            print(node.val)
            tmp.left = None
            tmp.right = node
            tmp = tmp.right
            if node.right:
                stack.append(node.right)
            if node.left:
                stack.append(node.left)
