标准动态规划题目，以S = "babgbag", T = "bag"，为例，dp[i][j]表示字符串S[0:j] 中有多少个 T[0:i]，可以得到下图：

        |  b, j=0 | a, j=1 | b, j=2 | g, j=3 | b, j=4 | a, j=5 | g, j=6 |
 ------------------------------------------------------------------------       
 b, i=0 |    1       1        2         2        3       3         3
 a, i=1 |    0       1        1         1        1       4         4
 g, i=2 |    0       0        0         1        1       1         ?

当i=2，j=6时，表示字符串 'babgbag' 中有多少个 'bag'，此时，要想知道现在有多少个'bag', 
那么只需知道 j=5 时有多少个 'ba' 和已经有了多少个'bag', 接着再判断 S[j] ==T[i] 是否成立，
如果成立，dp[i][j] = 'ba'的个数 + 已有'bag'的个数，dp[i][j] = 已有'bag'的个数。

所以dp方程式为：dp[i][j] = dp[i][j-1] + dp[i-1][i-j] * (T[i] == S[j])（dp[i][j-1]对应绿色方格，dp[i-1][i-j]对应黄色方格）。



class Solution:
    def numDistinct(self, s, t):
 
        m, n = len(s)+1, len(t)+1
        dp = [[1]*m for _ in range(n)]  # 初始化dp
        for i in range(1, n): dp[i][0] = 0
 
        for i in range(1, n):  # 开始计算
            for j in range(1, m):
                dp[i][j] = dp[i][j-1] + dp[i-1][j-1]*(t[i-1] == s[j-1])
        return dp[-1][-1]
