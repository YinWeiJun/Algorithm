
# 很容易想到通过递归进行实现
# 如s=“babgbag”, t=“bag”
# numDistinct(s, t) = numDistinct("abgbag", "ag") + numDistinct("abgbag", "bag")
# 但是这种递归的方式，时间和空间复杂度都太高了

class Solution:
    def numDistinct(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: int
        """
        if not s or not t:
            return 0
        return self.recursive(s, t)
        
    def recursive(self, s, t):
        if not s or not t:
            return 0
        if len(t) == 1:
            return s.count(t[0])
        try:
            i = s.index(t[0])
            n1 = self.recursive(s[i+1:], t[1:])
            n2 = self.recursive(s[i+1:], t)
            return n1 + n2
        except:
            return 0
        
      
      
class Solution:
    def numDistinct(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: int
        """
        
        if not s or not t:
            return 0
        return self.recursive(s, t)
        
    def recursive(self, s, t):
        if not s or not t or len(s) < len(t):
            return 0
        if len(s) == len(t):
            if s == t:
                return 1
            return 0
        # print("---s: {} ---t: {} ---".format(s, t))
        if len(t) == 1:
            return s.count(t[0])
        try:
            i = s.index(t[0])
            n1 = self.recursive(s[i+1:], t[1:])
            if n1 == 0:
                return 0
            n2 = self.recursive(s[i+1:], t)
            return n1 + n2
        except:
            return 0
