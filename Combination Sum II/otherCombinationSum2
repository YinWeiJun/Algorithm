
class Solution(object):
    def combinationSum2(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        """
        res = []
        candidates.sort(reverse=True)
        self.dfs(candidates, target, 0, [], res)
        return res
        """
        def comb(nums, i, target, path, res):
            if target == 0:
                res.append(path)
            else:
                for k in xrange(i, len(nums)):
                    n = nums[k]
                    if target - n >= 0 and (k == i or nums[k] != nums[k - 1]):
                        comb(nums, k + 1, target - n, path + [n], res)
        res = []
        candidates.sort(reverse=True)
        comb(candidates, 0, target, [], res)
        return res
        
    def dfs(self, candidates, target, start, path, res):
        if target == 0:
            res.append(path)
        elif target > 0:
            for i in xrange(start, len(candidates)):
                if i == start or candidates[i] != candidates[i -1]:
                    self.dfs(candidates, target - candidates[i], i + 1, path + [candidates[i]], res)
