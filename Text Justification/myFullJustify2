class Solution(object):
    def fullJustify(self, words, maxWidth):
        """
        :type words: List[str]
        :type maxWidth: int
        :rtype: List[str]
        """
        if maxWidth==0:
            return [""]
        elif len(words)==1 and words[0]=="":
            return [" "*maxWidth]
        res=[]
        length=len(words)
        tmpLen,tmpStr,l,r=0,"",0,0
        while r<length:
            l_word=len(words[r])
            if tmpLen==0:
                if r==length-1:
                    res.append(words[l]+" "*(maxWidth-l_word))
                    return res
                tmpLen+=l_word
            elif tmpLen+1+l_word<maxWidth:
                if r==length-1:
                    res.append(words[l]+("".join(" "+words[i] for i in xrange(l+1,r+1)))+" "*(maxWidth-tmpLen-1-l_word))
                    return res
                tmpLen+=(l_word+1)
            elif tmpLen+1+l_word==maxWidth:
                tmpLen=0
                res.append(words[l]+"".join(" "+words[i] for i in xrange(l+1,r+1)))
                l=r+1
            else:
                n,m=maxWidth-tmpLen,r-l
                if m==1:
                    res.append(words[l]+" "*(maxWidth-tmpLen))
                else:
                    a,b=n/(m-1),n%(m-1)
                    if b==0:
                        res.append(words[l]+("".join(" "*(a+1)+words[i] for i in xrange(l+1,r))))
                    else:
                        res.append(words[l]+("".join(" "*(a+2)+words[i] for i in xrange(l+1,l+b+1)))+("".join(" "*(a+1)+words[j] for j in xrange(l+b+1,r))))
                tmpLen=0
                l=r
                r-=1
            r+=1
        return res
