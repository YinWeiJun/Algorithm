# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class BSTIterator(object):

    def __init__(self, root):
        """
        :type root: TreeNode
        """
        self.l_root = []
        self.inOrder(root, self.l_root)
        self.current = 0
        self.length = len(self.l_root)

    def next(self):
        """
        @return the next smallest number
        :rtype: int
        """
        if self.current < self.length:
            node = self.l_root[self.current]
            self.current += 1
            return node.val
        else:
            return None

    def hasNext(self):
        """
        @return whether we have a next smallest number
        :rtype: bool
        """
        if self.current < self.length:
            return True
        return False
        
    def inOrder(self, root, l_root):
        if not root:
            return None
        self.inOrder(root.left, l_root)
        l_root.append(root)
        self.inOrder(root.right, l_root)
        

# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()
