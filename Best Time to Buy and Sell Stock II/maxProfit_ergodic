# 遍历数组，用l记录买入的位置，r1，为l的右边第一个，r2为右边第二个，根据l,r1,r2之间的关系进行计算
# 如果l > r1,显然不应该在l位置买入，所以，令l=r1, 从新判断
# 如果l < r1,显然l已经买入了，关键是什么时候卖出去，当r2>r1时，显然不能卖，因为之后价格更高
#                                               当r2<r1时，显然可以卖了，然后r1再从新开始买入
# ps： 注意最后一个要素的特殊情况

class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        if not prices or len(prices) == 1:
            return 0
        
        if len(prices) == 2:
            diff = prices[1] - prices[0]
            if diff > 0:
                return diff
            return 0
        
        res = 0
        # records = []
        l = (0, prices[0])
        i = 2
        while i < len(prices):
            r1, r2 = (i-1, prices[i-1]), (i, prices[i])
            if l[1] >= r1[1]:
                l = r1
                if i == len(prices) - 1:
                    if r2[1] > r1[1]:
                        res = res + r2[1] - r1[1]
                    break
                else:
                    l = r1
            else:
                if i == len(prices) - 1:
                    if r2[1] > r1[1]:
                        res = res + r2[1] - l[1]
                    else:
                        res = res + r1[1] - l[1]
                    break
                if r2[1] < r1[1]:
                    res = res + r1[1] - l[1]
                    # records.append((l[0], r1[0], r1[1]-l[1]))
                    l = r1
            i = i + 1
        return res
