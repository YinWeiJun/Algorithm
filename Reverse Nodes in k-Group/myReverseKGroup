# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution(object):
    def reverseKGroup(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        :思想：每次反转ｋ个ListNode,记录反转完后的ListNode，然后将没有遍历的ListNode作为head进行递归
        :反转则通过讲ListNode存到dict(也可以用list)中，然后逆序遍历加入ListNode就可以了
        """
        if k<2 or head==None or head.next==None:
            return head
        que={}
        l,tmp,res=head,ListNode(0),ListNode(0)
        res=tmp
        i=0
        while i < k and l!=None:
            que[i]=l
            l=l.next
            i+=1
        if i < k: return head
        while i > 0:
            tmp.next=que[i-1]
            tmp=tmp.next
            i-=1
        tmp.next=self.reverseKGroup(l, k)
        return res.next
