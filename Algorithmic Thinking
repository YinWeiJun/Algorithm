五大算法基本思想—分治，动态规划，贪心，回溯，分支界限

一、算法理解
　　算法是什么，即是按照一定的步骤，一步步去解决某个问题，解决问题的方法步骤就称为算法，例如数学中我们学过的做一个运算，解一个方程，等等，都需要有一个清晰的思路，一步步地去完成。可以说算法就在身边。
　　算法和计算机有什么关系，计算机它是机器，没有人类的大脑可以思考，但是它怎么完成我们交给他的人物的呢，就是通过算法（当然是人为预先设计好的），计算机解决任何问题都要依赖于算法，没有算法也就没有计算机。
　　为了计算机能更好更有效率的运行，算法就必须足够好，既要正确易理解，又要可靠效率。下面来研究经常用到的算法设计。

二、算法基本思想

1、分治法
    分治，分而治之。将一个难以直接解决的大问题，划分成一些规模较小的子问题，以便各个击破，分而治之。  
    需要注意子问题的两个规则：
        1、平衡子问题：就是是各个子问题的规模大致相同
        2、独立子问题：各子问题之间相互独立，如果不独立，还需要分解子问题。

2、动态规划法
      动态规划法和分治法类似，它也是将大问题分解成子问题求解，不同的是，如果分解的子问题有很多是相同的，
    采用分治法相同的子问题会求解多次，是不是很影响效率；动态规划法呢，它会保存已解决的子问题的答案，
    再有相同的子问题直接用保存的答案就行了，节省了很多计算时间。
    最优性问题
      动态规划法通常用于求解最优性问题，这类问题中，可能会有许多可行解，我们希望找出最优的那个。动态规划法就能找出其中的最优解（最优解可能不止一个）。

3、贪心算法
      动态规划是贪心算法的基础。贪心算法是通过做一系列的选择来给出某一问题的最优解。对算法中的每一个决策点，
    做一个当时（看起来是）最佳的选择。这种启发式策略并不总是能产生出最优解。
      贪心选择性质：一个全局最优解可以通过局部最优（贪心）选择来达到。换句话说，当考虑做如何选择时，我们只考虑对当前问题的选择而不考虑子问题的结果。
	  在动态规划中，每一步都要做出选择，但是这些选择依赖于子问题的解。因此，解动态规划问题一般是自底向上，从小子问题处理至大子问题。在贪心算法中，
    我们所做的总是当前看似最佳的选择，然后再解决选择之后的所出现的子问题。贪心算法所作的当前选择可能要依赖与已经作出的选择，但不依赖于有待于做出的
    选择或子问题的解，因此贪心策略通常是自顶向下地做的，一个一个地做出贪心选择，不断地将给定的问题实例归约为更小的问题。
	  最优子结构：对一个问题来说，如果它的一个最优解包含了其子问题的最优解，则称该问题具有最优子结构。
    
4、回溯法
	   回溯法也称试探法，它的基本思想是：从问题的某一种状态（初始状态）出发，搜索从这种状态出发所能达到的所有“状态”，当一条路走到“尽头”的时候
  （不能再前进），再后退一步或若干步，从另一种可能“状态”出发，继续搜索，直到所有的“路径”（状态）都试探过。这种不断“前进”、不断“回溯”寻找解的方法，
  就称作“回溯法”。
	用回溯算法解决问题的一般步骤为： 　　	
    一、定义一个解空间，它包含问题的解。 　　	
    二、利用适于搜索的方法组织解空间。
    三、利用深度优先法搜索解空间。
	  四、利用限界函数避免移动到不可能产生解的子空间。问题的解空间通常是在搜索问题的解的过程中动态产生的，这是回溯算法的一个重要特性
    
5、分支限界法
	  分支限界 (branch and bound) 算法是一种在问题的解空间树上搜索问题的解的方法。但与回溯算法不同，分支定界算法采用广度优先或最小耗费
    优先的方法搜索解空间树，并且，在分支定界算法中，每一个活结点只有一次机会成为扩展结点。利用分支定界算法对问题的解空间树进行搜索，它的搜索策略是：
	  1 ．产生当前扩展结点的所有孩子结点；
	  2 ．在产生的孩子结点中，抛弃那些不可能产生可行解（或最优解）的结点；
	  3 ．将其余的孩子结点加入活结点表；
	  4 ．从活结点表中选择下一个活结点作为新的扩展结点。如此循环，直到找到问题的可行解（最优解）或活结点表为空。
	  分支限界法的思想是：首先确定目标值的上下界，边搜索边减掉搜索树的某些支，提高搜索效率。
