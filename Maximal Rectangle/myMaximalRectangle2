思想：
首先，对于每一行，从第一个元素依次遍历，若当前元素为1，则记录包括当前元素开始向前有多少个连续的1的个数；若为0，则记录为0。

其次，按列遍历。对于每一个非0 的记录，从当前这点开始，向上与向下各扫描一次，直到遇到记录小于当前记录的时候停止。
同时统计扫描的行数（记为count，初始算作自己为1，count最终为扫描的行数总和，不算小于该记录的行数）。

则针对当前位置所在的最大矩形即为 当前记录*count。

记录下每次得到的矩形，得到最大值。

class Solution:
    def maximalRectangle(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        if not matrix or not matrix[0]:
            return 0
        m_row = self.size_row(matrix)
        ret = []
        for i in range(len(matrix)):
            tmp_ret = [0] * len(matrix[0])
            ret.append(tmp_ret)
        max_ret = 0
        for j in range(len(m_row[0])):
            for i in range(len(m_row)):
                tmp = m_row[i][j]
                k = i - 1
                while k >= 0:
                    if m_row[k][j] >= m_row[i][j]:
                        tmp += m_row[i][j]
                        k -= 1
                    else:
                        break
                k = i + 1
                while k < len(m_row): 
                    if m_row[k][j] >= m_row[i][j]:
                        tmp += m_row[i][j]
                        k += 1
                    else:
                        break
                max_ret = max(max_ret, tmp)
                ret[i][j] = tmp
        return max_ret
                
    
    def size_row(self, matrix):
        ret = []
        for l in matrix:
            tmp = []
            for v in l:
                if v == "0":
                    tmp.append(0)
                else:
                    if not tmp:
                        tmp.append(1)
                    else:
                        tmp.append(tmp[-1]+1)
            ret.append(tmp)
        return ret
    
