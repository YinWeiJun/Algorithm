class Solution(object):
    def longestValidParentheses(self, s):
        """
        :type s: str
        :rtype: int
        :思想：匹配主要关注“）”，没出现一次“）”，如果前面一个是“（”，则形成一个完整的“（）”，如果前面一个是“）”，则还要判断更前面的内容.
        :算法用tmp[i]记录从序号i开始往前判断字符串中最大的完整匹配，如："())()()”，tmp=[0,2,0,0,2,0,4]
        :计算tmp[i]时，观察规律，只有s[i]=")"时才不为0，s[i]=")"又分为两种情况，第一种：s[i-1]="(",则tmp[i]=2+tmp[i-2]；第二种：
        :s[i-1]=")",那么tmp[i]为tmp[i-1]匹配完成的部分和“）”与tmp[i-1]完成匹配之前的部分进行计算，如果i-tmp[i-1]-1存在，
        :如果s[i-tmp[i-1]-1]=“（”，则tmp[i]=tmp[i-1]+2+tmp[i-tmp[i-1]-2],否则tmp[i]=0.如s="())))()())"
        :tmp[9]=0,如果s="()))(()())",tmp[9]=tmp[8]+2+tmp[3]=6
        """
        if s == "":
            return 0
        tmp=[0]
        i=1
        while i < len(s):
            if s[i-1:i+1]=="()":
                if i>=2:
                    tmp.append(2+tmp[i-2])
                else:
                    tmp.append(2)
            elif s[i-1:i+1]=="))" and i>tmp[i-1]:
                if s[i-tmp[i-1]-1]=='(':
                    if i>=tmp[i-1]+2:
                        tmp.append(tmp[i-1]+2+tmp[i-tmp[i-1]-2])
                    else:
                        tmp.append(tmp[i-1]+2)
                else:
                    tmp.append(0)
            else:
                tmp.append(0)
            i+=1
        return max(tmp)
