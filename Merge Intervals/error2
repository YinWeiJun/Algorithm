# Definition for an interval.
class Interval(object):
    def __init__(self, s=0, e=0):
        self.start = s
        self.end = e

class Solution(object):
    def merge(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: List[Interval]
        """
        if len(intervals)<2:
            return intervals
        # self.quickSort(intervals, 0, len(intervals)-1)
        # print '-------------------------------------------------------------------------------'
        # print self.intervals2str(intervals)
        i=1
        while i < len(intervals):
            # print 'i: ',i
            tmp=intervals[i]
            j=i-1
            while j>=0:
                # print 'j: ',j,self.intervals2str(intervals)
                if tmp.start<=intervals[j].end:
                    intervals[i]=Interval(intervals[j].start, max(tmp.end, intervals[j].end))
                    intervals=intervals[0:j]+intervals[i:]
                    i-=1
                break
            i+=1
        # print "ok: ",self.intervals2str(intervals)
        return intervals[:]
         
    def sub_sort(self, intervals, low, high):
        key=intervals[low].start
        pos=low
        while low < high:
            while low < high and intervals[high].start >= key:
                high-=1
            while low < high and intervals[low].start <= key:
                low+=1
            if low==high:
                intervals[pos],intervals[low]=intervals[low],intervals[pos]
                return low
            else:
                intervals[low],intervals[high]=intervals[high],intervals[low]
                print '    ',self.intervals2str(intervals)
                
    def quickSort(self, intervals, low, high):
        if low < high:
            key_index=self.sub_sort(intervals, 0, len(intervals)-1)
            self.quickSort(intervals, 0, key_index)
            self.quickSort(intervals, key_index+1, high)
            
    def intervals2str(self,intervals):
        res=""
        for val in intervals:
            res+="["+str(val.start)+", "+str(val.end)+"] "
        return res
