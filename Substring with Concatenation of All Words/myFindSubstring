class Solution(object):
    def findSubstring(self, s, words):
        """
        :type s: str
        :type words: List[str]
        :rtype: List[int]
        :思想：巧妙运用dict的特效，不管dict长度多少，对于in的查询效率都是1，而list越长效率越低
        :不要陷入先把所有word进行全排列之后再去匹配
        :假设有n个word，当s中有word长度的子字符在words中，就直接将后续n-1个等长的子字符加入tmp，排序之后与words相同即可，
        :用dict记录相同的，如果后面的不在dict中就可以，不然就忽略。
        """
        if words==[] or len(s)<len(words[0]):
            return []
        l_word=len(words[0])
        l_words=len(words)
        words=sorted(words)
        tmp_words={}
        for i in xrange(l_words):
            tmp_words[words[i]]=i
        signDict={}
        res=[]
        for i in xrange(len(s)-l_word*l_words+1):
            if s[i:i+l_word] in tmp_words:
                tmp=[]
                tmp.append(s[i:i+l_word])
                for j in xrange(l_words-1):
                    tmp.append(s[i+l_word*(j+1):i+l_word*(j+2)])
                tmp2=[]
                tmp2=sorted(tmp)
                if cmp(tmp2,words)==0 and str(tmp) not in signDict:
                    res.append(i)
                    signDict[i]=str(tmp)
        return res
        
        
class Solution(object):
    def findSubstring(self, s, words):
        """
        :type s: str
        :type words: List[str]
        :rtype: List[int]
        """
        if words==[] or len(s)<len(words[0]):
            return []
        l_word=len(words[0])
        l_words=len(words)
        words=sorted(words)
        signDict={}
        res=[]
        for i in xrange(len(s)-l_word*l_words+1):
            if s[i:i+l_word] in words:
                tmp=[]
                tmp.append(s[i:i+l_word])
                for j in xrange(l_words-1):
                    tmp.append(s[i+l_word*(j+1):i+l_word*(j+2)])
                tmp2=[]
                tmp2=sorted(tmp)
                if cmp(tmp2,words)==0 and str(tmp) not in signDict:
                    res.append(i)
                    signDict[i]=str(tmp)
        return res
                    
